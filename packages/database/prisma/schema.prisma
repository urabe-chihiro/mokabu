// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ユーザーモデル
model User {
  id            String      @id @default(cuid())
  email         String      @unique
  emailVerified DateTime?
  name          String?
  password      String?     // パスワードハッシュ（メール/パスワード認証用）
  image         String?
  portfolios    Portfolio[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// NextAuth.js - アカウント情報（OAuth用）
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// NextAuth.js - セッション情報
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// NextAuth.js - メール認証用トークン
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ポートフォリオモデル
model Portfolio {
  id            String   @id @default(cuid())
  name          String
  description   String?
  initialAmount Float    @default(0) // 初期投資額
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stocks        Stock[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

// 株式保有情報モデル
model Stock {
  id           String    @id @default(cuid())
  symbol       String    // 銘柄コード（例: 7203）
  name         String    // 銘柄名（例: トヨタ自動車）
  quantity     Int       // 保有数量
  buyPrice     Float     // 購入単価
  currentPrice Float?    // 現在価格（外部APIから取得想定）
  sector       String?   // セクター（例: 自動車、金融など）
  portfolioId  String
  portfolio    Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([portfolioId])
  @@index([symbol])
}
